{
  "name": "React-draggable-tab",
  "tagline": "",
  "body": "# React-draggable-tab [![Build Status](https://travis-ci.org/georgeOsdDev/react-draggable-tab.svg?branch=develop)](https://travis-ci.org/georgeOsdDev/react-draggable-tab) [![npm version](https://badge.fury.io/js/react-draggable-tab.svg)](http://badge.fury.io/js/react-draggable-tab)\r\n\r\n\r\n[![Gyazo](http://i.gyazo.com/42d408d288292f62fbb8d650897acbc4.gif)](http://gyazo.com/42d408d288292f62fbb8d650897acbc4)\r\n\r\nAtom like draggable tab react component.\r\n\r\n## Demo\r\n\r\n[View Demo](http://georgeosddev.github.io/react-draggable-tab/example/)\r\n\r\n## Installation\r\n\r\n```bash\r\nnpm install --save react-draggable-tab\r\n```\r\nReact v0.14 is supported from react-draggable-tab v0.4.0.\r\nFor React v0.13.x, please use react-draggable-tab v0.3.3.\r\n\r\n## API\r\n\r\n### `Tab`\r\n\r\n`Tab` is just a case class to check props.\r\n`props.children` will rendered into content area.\r\n\r\n#### Props\r\n\r\n  * `key`: *unique* key in `TabList`.\r\n    `React.PropTypes.string.isRequired`\r\n\r\n  * `beforeTitle`: element to show in tab. eg icon.\r\n    `React.PropTypes.element`\r\n\r\n  * `title`: string or element to show in tab.\r\n    `React.PropTypes.oneOfType([React.PropTypes.string, React.PropTypes.element]).isRequired`\r\n\r\n  * `afterTitle`: element to show in tab. eg: notification badge\r\n    `React.PropTypes.element`\r\n\r\n  * `disableClose`: If `true`, closeButton will not be appeared in tab.\r\n    `React.PropTypes.bool` (Default `false`)\r\n\r\n###### Style (for each tab)\r\n\r\n  * `tabClassNames`: classNames which will be **added** to rendered elements.\r\n   * `tab`: base `li` element of tab (defult: `rdTab`)\r\n   * `tabBefore`: before element of `li` which emulate `:Before` selector (defult: `rdTabBefore`)\r\n   * `tabAfter`: after element of `li` which emulate `:After` selector (defult: `rdTabAfter`)\r\n   * `tabTitle`: `span` element of tab title (defult: `rdTabTitle`)\r\n   * `tabBeforeTitle`: `span` element of tab before title (defult: `tabBeforeTitle`)\r\n   * `tabAfterTitle`: `span` element of tab after title (defult: `tabAfterTitle`)\r\n   * `tabCloseIcon`: base `span` element of close icon (defult: `rdCloseIcon`)\r\n   * `tabActive`: selected tab's `li`, before, after (defult: `rdTabActive`)\r\n   * `tabHover`: selected tab's `li`, before, after (defult: `rdTabHover`)\r\n\r\n  * `tabStyles`: Inline styles which will be **overwritten** default and common-tabs inline styles.\r\n   * `tab`: base `li` element of tab\r\n   * `tabBefore`: before element of `li` which emulate `:Before` selector.\r\n   * `tabAfter`: after element of `li` which emulate `:After` selector.\r\n   * `tabTitle`: `span` element of tab title\r\n   * `tabActive`: selected tab's `li`\r\n   * `tabBeforeActive`: selected tab's `li` before\r\n   * `tabAfterActive`: selected tab's `li` after\r\n   * `tabTitleActive`: selected tab's title\r\n   * `tabOnHover`: hovered tab's `li`\r\n   * `tabBeforeOnHover`: hovered tab's `li` before\r\n   * `tabAfterOnHover`: hovered tab's `li` after\r\n   * `tabTitleOnHover`: hovered tab's title\r\n   * `tabCloseIcon`: base `span` element of close icon\r\n   * `tabCloseIconOnHover`: base `span` element of close icon when hover\r\n\r\n  * `containerStyle`: style object which will be apply to container of rendered tab.\r\n\r\n##### Events\r\n\r\n  All other props like `onXX` handler set to `Tab` will be passed to rendered element except `onClick`\r\n  You can use any `onXX` for [Supported events](https://facebook.github.io/react/docs/events.html#supported-events) for tab element.\r\n\r\n### `Tabs`\r\n\r\n`Tabs` is container for tab. it will render tabBar and content of selected element.\r\n\r\n#### Props\r\n\r\n  * `tabs`: Array of `Tab` elements.\r\n    `React.PropTypes.arrayOf(React.PropTypes.element)`\r\n\r\n  * `selectedTab`: key for selectedTab.\r\n    `React.PropTypes.string` default to first tab.\r\n\r\n  * `tabAddButton`: element for add button.\r\n    `React.PropTypes.element`\r\n\r\n  * `keepSelectedTab`: Prevent tab select on drag/move behind tab.\r\n    `React.PropTypes.bool` default `false`.\r\n\r\n###### Shortcut key binding\r\n  * `shortCutKeys`: Short cut key bindings as [Mousetrap](https://craig.is/killing/mice) style.\r\n   * `close`: key binding to close current tab (`onTabClose` will be called)\r\n   * `create`: key binding to create tab (`onTabAddButtonClick` will be called)\r\n   * `moveRight`: key binding to move right (`onTabSelect` will be called)\r\n   * `moveLeft`: key binding to move left (`onTabSelect` will be called)\r\n\r\n###### Style (All tabs will be apply these styles)\r\n\r\n  * `tabsClassNames`: classNames which will be **added** to rendered elements.\r\n   * `tabBar`: base `ul` element of tab bar (defult: `rdTabBar`)\r\n   * `tabBarAfter`: after `span` element of tab bar which emulate `:After` selector (defult: `rdTabBarAfter`)\r\n   * `tab`: base `li` element of tab (defult: `rdTab`)\r\n   * `tabBefore`: before element of `li` which emulate `:Before` selector (defult: `rdTabBefore`)\r\n   * `tabAfter`: after element of `li` which emulate `:After` selector (defult: `rdTabAfter`)\r\n   * `tabTitle`: `span` element of tab title (defult: `rdTabTitle`)\r\n   * `tabBeforeTitle`: `span` element of tab before title (defult: `rdTabBeforeTitle`)\r\n   * `tabBeforeTitle`: `span` element of tab after title (defult: `rdTabAfterTitle`)\r\n   * `tabCloseIcon`: base `span` element of close icon (defult: `rdCloseIcon`)\r\n   * `tabActive`: selected tab's `li`, before, after (defult: `rdTabActive`)\r\n\r\n  * `tabsStyles`: Inline styles which will be **overwritten** default inline styles.\r\n   * `tabBar`: base `ul` element of tab bar\r\n   * `tabBarAfter`: after `span` element of tab bar which emulate `:After` selector\r\n   * `tab`: base `li` element of tab\r\n   * `tabBefore`: before element of `li` which emulate `:Before` selector.\r\n   * `tabAfter`: after element of `li` which emulate `:After` selector.\r\n   * `tabTitle`: `span` element of tab title\r\n   * `tabActive`: selected tab's `li`\r\n   * `tabBeforeActive`: selected tab's `li` before\r\n   * `tabAfterActive`: selected tab's `li` after\r\n   * `tabTitleActive`: selected tab's title\r\n   * `tabCloseIcon`: base `span` element of close icon\r\n   * `tabCloseIconOnHover`: base `span` element of close icon when hover\r\n\r\n##### Events\r\n\r\n  * `onTabSelect(e, key, currentTabs)`: Called when tab of key was selected.\r\n    `currentTabs` is array of tabs elements sorted with current order.\r\n\r\n  * `onTabClose(e, key, currentTabs)`: Called when tab of key was closed.\r\n    `currentTabs` is array of tabs elements sorted with current order.\r\n\r\n  * `onTabPositionChange(e, key, currentTabs)`: Called when tab of key was moved.\r\n    `currentTabs` is array of tabs elements sorted with current order.\r\n\r\n  * `onTabAddButtonClick(e, currentTabs)`: Called when `tab add button` was clicked.\r\n    `currentTabs` is array of tabs elements sorted with current order.\r\n    Basically you will concat `currentTabs` with new empty tab.\r\n\r\n    ```javascript\r\n    let newTabs = currentTabs.concat([newTab]);\r\n    ```\r\n\r\n  ~~* `onTabDoubleClick(e, key)`: Called when `title` was double clicked.~~ Removed from v0.5.0\r\n\r\n  ~~* `onTabMouseEnter(e, key)`: Called when mouse enter to `tab`.~~ Removed from v0.5.0\r\n\r\n  ~~* `onTabMouseLeave(e, key)`: Called when mouse leave from `tab`.~~ Removed from v0.5.0\r\n\r\n## Usage example\r\n\r\n```javascript\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    let icon = (<image src='icon.png' style={{height:'13px'}}/>);\r\n    let fonticon = (<icon className='icon-html5'/>);\r\n    let badge = (<DynamicTabBadge />);\r\n\r\n    this.state = {\r\n      tabs:[\r\n        (<Tab key={'tab0'} title={'unclosable tab'} disableClose={true} >\r\n          <div>\r\n            <h1>This tab cannot close</h1>\r\n          </div>\r\n        </Tab>),\r\n        (<Tab key={'tab1'} title={'1stTab'} beforeTitle={icon} >\r\n          <div>\r\n            <h1>This is tab1</h1>\r\n          </div>\r\n        </Tab>),\r\n        (<Tab key={'tab2'} title={'2ndTab Too long Toooooooooooooooooo long'} beforeTitle={fonticon} >\r\n          <div>\r\n            <pre>Lorem ipsum dolor sit amet, consectetur adipisicing elit,\r\n            </pre>\r\n          </div>\r\n        </Tab>),\r\n        (<Tab key={'tab3'} title={'Dynamic tab'} afterTitle={badge}>\r\n          <DynamicTabContent/>\r\n        </Tab>)\r\n      ],\r\n      badgeCount: 0\r\n    };\r\n  }\r\n\r\n  handleTabSelect(e, key, currentTabs) {\r\n    console.log('handleTabSelect key:', key);\r\n    this.setState({selectedTab: key, tabs: currentTabs});\r\n  }\r\n\r\n  handleTabClose(e, key, currentTabs) {\r\n    console.log('tabClosed key:', key);\r\n    this.setState({tabs: currentTabs});\r\n  }\r\n\r\n  handleTabPositionChange(e, key, currentTabs) {\r\n    console.log('tabPositionChanged key:', key);\r\n    this.setState({tabs: currentTabs});\r\n  }\r\n\r\n  handleTabAddButtonClick(e, currentTabs) {\r\n    // key must be unique\r\n    const key = 'newTab_' + Date.now();\r\n    let newTab = (<Tab key={key} title='untitled'>\r\n                    <div>\r\n                      <h1>New Empty Tab</h1>\r\n                    </div>\r\n                  </Tab>);\r\n    let newTabs = currentTabs.concat([newTab]);\r\n\r\n    this.setState({\r\n      tabs: newTabs,\r\n      selectedTab: key\r\n    });\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <Tabs\r\n        tabsClassNames={tabsClassNames}\r\n        tabsStyles={tabsStyles}\r\n        selectedTab={this.state.selectedTab ? this.state.selectedTab : \"tab2\"}\r\n        onTabSelect={this.handleTabSelect.bind(this)}\r\n        onTabClose={this.handleTabClose.bind(this)}\r\n        onTabAddButtonClick={this.handleTabAddButtonClick.bind(this)}\r\n        onTabPositionChange={this.handleTabPositionChange.bind(this)}\r\n        tabs={this.state.tabs}\r\n        shortCutKeys={\r\n          {\r\n            'close': ['alt+command+w', 'alt+ctrl+w'],\r\n            'create': ['alt+command+t', 'alt+ctrl+t'],\r\n            'moveRight': ['alt+command+tab', 'alt+ctrl+tab'],\r\n            'moveLeft': ['shift+alt+command+tab', 'shift+alt+ctrl+tab']\r\n          }\r\n        }\r\n      />\r\n    )\r\n  }\r\n};\r\n```\r\n\r\nSee also [example](https://github.com/georgeOsdDev/react-draggable-tab/tree/develop/example)\r\n\r\n\r\n```bash\r\nnpm install\r\nnpm run start:example\r\n```\r\n\r\n## Tests\r\n\r\n```bash\r\nnpm test\r\n```\r\n\r\n## [Contributors](https://github.com/georgeOsdDev/react-draggable-tab/graphs/contributors)\r\n\r\n * [@linhlc888](https://github.com/linhlc888)\r\n\r\n## Known Issue\r\n\r\n* Dynamic tab content.\r\n\r\n`Tabs` do not care any change in `Tab` content.\r\ncontent needs update by your application side.\r\nSee `3rdTab` in example.\r\n\r\n\r\n* `flex` style should be define in CSS for safari.\r\nSee https://github.com/facebook/react/issues/2020\r\n\r\nIn application, class `rdTabBar` or your custom class of `TabBar` needs `display: -webkit-flex` in CSS like below.\r\n```css\r\n.myTabBar {\r\n  display: -webkit-flex;\r\n}\r\n\r\n",
  "google": "",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}