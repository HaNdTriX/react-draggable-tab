{"name":"React-draggable-tab","tagline":"","body":"# wip\r\n\r\nNot yet released.\r\n\r\n\r\n---\r\n\r\n# React-draggable-tab [![Build Status](https://travis-ci.org/georgeOsdDev/react-draggable-tab.svg?branch=develop)](https://travis-ci.org/georgeOsdDev/react-draggable-tab)\r\n\r\n\r\n[![Gyazo](http://i.gyazo.com/1ca47462f2b7a8657dcfea9fa8fc5533.gif)](http://gyazo.com/1ca47462f2b7a8657dcfea9fa8fc5533)\r\n\r\n\r\nAtom like draggable tab react component.\r\n\r\n## Demo\r\n\r\n[View Demo](http://georgeosddev.github.io/react-draggable-tab/example/)\r\n\r\n## Installation\r\n\r\n**Not yet released!!**\r\n\r\n```bash\r\nnpm install --save react-draggable-tab\r\n```\r\n\r\n## API\r\n\r\n### `Tab`\r\n\r\n`Tab` is just a case class to check props.\r\n`props.children` will rendered into content area.\r\n\r\n  * `key`: *unique* key in `TabList`.\r\n    `React.PropTypes.string.isRequired`\r\n\r\n  * `title`: string to show in tab.\r\n    `React.PropTypes.string.isRequired`\r\n\r\n  * `disableClose`: If `true`, closeButton will not be appeared in tab.\r\n    `React.PropTypes.bool` (Default `false`)\r\n\r\n### `Tabs`\r\n\r\n`Tabs` is container for tab. it will render tabBar and content of selected element.\r\n\r\n#### Props\r\n\r\n  * `tabs`: Array of `Tab` elements.\r\n    `React.PropTypes.arrayOf(React.PropTypes.element)`\r\n\r\n  * `selectedTab`: key for selectedTab.\r\n    `React.PropTypes.string` default to first tab.\r\n\r\n  * `tabAddButton`: element for add button.\r\n    `React.PropTypes.element`\r\n\r\n###### Style\r\n\r\n  * `tabClassNames`: classNames which will be **added** to rendered elements.\r\n   * `tabBar`: base `ul` element of tab bar (defult: `rdTabBar`)\r\n   * `tabBarAfter`: after `span` element of tab bar which emulate `:After` selector (defult: `rdTabBarAfter`)\r\n   * `tab`: base `li` element of tab (defult: `rdTab`)\r\n   * `tabBefore`: before element of `li` which emulate `:Before` selector (defult: `rdTabBefore`)\r\n   * `tabAfter`: after element of `li` which emulate `:After` selector (defult: `rdTabAfter`)\r\n   * `tabTitle`: `span` element of tab title (defult: `rdTabTitle`)\r\n   * `tabCloseIcon`: base `span` element of close icon (defult: `rdCloseIcon`)\r\n   * `tabActove`: selected tab's `li`, before, after (defult: `rdTabActive`)\r\n\r\n  * `tabStyles`: Inline styles which will be **overwritten** default inline styles.\r\n   * `tabBar`: base `ul` element of tab bar\r\n   * `tabBarAfter`: after `span` element of tab bar which emulate `:After` selector\r\n   * `tab`: base `li` element of tab\r\n   * `tabBefore`: before element of `li` which emulate `:Before` selector.\r\n   * `tabAfter`: after element of `li` which emulate `:After` selector.\r\n   * `tabTitle`: `span` element of tab title\r\n   * `tabActove`: selected tab's `li`\r\n   * `tabBeforeActove`: selected tab's `li` before\r\n   * `tabAfterActove`: selected tab's `li` after\r\n   * `tabTitleActive`: selected tab's title\r\n   * `tabCloseIcon`: base `span` element of close icon\r\n   * `tabCloseIconHover`: base `span` element of close icon when hover\r\n\r\n##### Events\r\n\r\n  * `onTabSelected(e, key, currentTabs)`: Called when tab of key was selected.\r\n    `currentTabs` is array of tabs elements sorted with current order.\r\n\r\n  * `onTabClosed(e, key, currentTabs)`: Called when tab of key was closed.\r\n    `currentTabs` is array of tabs elements sorted with current order(including closed).\r\n\r\n  * `onTabPositionChanged(e, key, currentTabs)`: Called when tab of key was moved.\r\n    `currentTabs` is array of tabs elements sorted with current order.\r\n\r\n  * `onTabAddButtonClicked(e, currentTabs)`: Called when `tab add button` was clicked.\r\n    `currentTabs` is array of tabs elements sorted with current order.\r\n    Basically you will concat `currentTabs` with new empty tab.\r\n\r\n    ```javascript\r\n    let newTabs = currentTabs.concat([newTab]);\r\n    ```\r\n\r\n## Usage example\r\n\r\n```javascript\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      tabs:[\r\n        (<Tab key={'tab0'} title={'fixedTab'} disableClose={true} >\r\n          <div>\r\n            <h1>This tab cannot close</h1>\r\n          </div>\r\n        </Tab>),\r\n        (<Tab key={'tab1'} title={'1stTab'} >\r\n          <div>\r\n            <h1>This is tab1</h1>\r\n          </div>\r\n        </Tab>),\r\n        (<Tab key={'tab2'} title={'2ndTab Too long Toooooooooooooooooo long'} >\r\n          <div>\r\n            <pre>Lorem ipsum dolor sit amet, consectetur adipisicing elit,\r\n            </pre>\r\n          </div>\r\n        </Tab>),\r\n        this._getDynamicTab()\r\n      ],\r\n      textvalue: ''\r\n    };\r\n  }\r\n\r\n  _getDynamicTab() {\r\n    return (\r\n    <Tab key='tab3' title={'3rdTab'} >\r\n      <div>\r\n        <h1>TAB3!!! This tab dynamically change</h1>\r\n        <textarea value={this.state ? this.state.textValue: ''} onChange={this._handleTextChange.bind(this)}></textarea>\r\n      </div>\r\n    </Tab>);\r\n  }\r\n\r\n  _handleTextChange(e) {\r\n    this.setState({textValue: e.target.value});\r\n  }\r\n\r\n  _replaceDynamicTab(tabs) {\r\n    return _.map(tabs, (tab) => {\r\n      if(tab.key === 'tab3') {\r\n        return this._getDynamicTab();\r\n      } else {\r\n        return tab;\r\n      }\r\n    });\r\n  }\r\n\r\n  handleTabSelect(e, key, currentTabs) {\r\n    this.setState({selectedTab: key, tabs: currentTabs});\r\n  }\r\n\r\n  handleTabClose(e, key, currentTabs) {\r\n    console.log('tabClosed key:', key);\r\n    this.setState({tabs: currentTabs});\r\n  }\r\n\r\n  handleTabPositionChange(e, key, currentTabs) {\r\n    console.log('tabPositionChanged key:', key);\r\n    this.setState({tabs: currentTabs});\r\n  }\r\n\r\n  handleTabAddButtonClick(e, currentTabs) {\r\n    // key must be unique\r\n    const key = 'newTab_' + Date.now();\r\n    let newTab = (<Tab key={key} title='untitle'>\r\n                    <div>\r\n                      <h1>New Empty Tab</h1>\r\n                    </div>\r\n                  </Tab>);\r\n    let newTabs = currentTabs.concat([newTab]);\r\n\r\n    this.setState({\r\n      tabs: this._replaceDynamicTab(newTabs),\r\n      selectedTab: key\r\n    });\r\n  }\r\n\r\n  render() {\r\n\r\n    let tabs = this._replaceDynamicTab(this.state.tabs)\r\n\r\n    return (\r\n      <Tabs\r\n        tabClassNames={tabClassNames}\r\n        tabStyles={tabStyles}\r\n        selectedTab={this.state.selectedTab ? this.state.selectedTab : \"tab2\"}\r\n        onTabSelected={this.handleTabSelect.bind(this)}\r\n        onTabClosed={this.handleTabClose.bind(this)}\r\n        onTabAddButtonClicked={this.handleTabAddButtonClick.bind(this)}\r\n        onTabPositionChanged={this.handleTabPositionChange.bind(this)}\r\n        tabs={tabs}>\r\n      </Tabs>\r\n    )\r\n  }\r\n};\r\n```\r\n\r\nSee also [example](https://github.com/georgeOsdDev/react-draggable-tab/tree/develop/example)\r\n\r\n\r\n```bash\r\nnpm install\r\nnpm run start:example\r\n```\r\n\r\n## Tests\r\n\r\n```bash\r\nnpm test\r\n```\r\n\r\n## Known Issue\r\n\r\n* Dynamic tab content.\r\n\r\n`Tabs` do not care any change in `Tab` content.\r\n`tabs` needs update by your application side.\r\nSee `3rdTab` in example.\r\n\r\n\r\n* `flex` style should be define in CSS for safari.\r\nSee https://github.com/facebook/react/issues/2020\r\n\r\nIn application, class `rdTabBar` or your custom class of `TabBar` needs `display: -webkit-flex` in CSS like below.\r\n```css\r\n.myTabBar {\r\n  display: -webkit-flex;\r\n}\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}